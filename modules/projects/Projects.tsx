'use client';
import { useState } from 'react';
import { AccordionProjects } from '@/components/accordion-projects';
import styles from './Projects.module.scss';

const projectsData = [
  {
    num: 0,
    title: 'Интернет - магазин',
    descr: [
      'на Next.js, Typescript, Redux Toolkit, Mongoose, MongoDB, Firebase,  VDS и Docker. Использовал готовые UI-компоненты: react-select, react-spinners, react-data-table-component - отрисовка товаров и заказов на странице администратора. Еще react-hook-form для валидации форм.',

      'Логика приложения разделена на авторизованного и не авторизованного пользователя и роли.',
      'Не авторизованный пользователь смотрит и сортирует товары по категории, бренду и цене. Авторизованный  - еще добавляет товары в избранное, корзину и оформляет заказ.',

      'Администратор добавляет, удаляет, сортирует и правит товары. Еще просматривает и сортирует заказы. Для быстрого нахождения товаров сделал форму поиска по названию.',

      'Не обошлось без сложностей: CRUD-операции в Mongoose со вложенными объектами, подключение к контейнеру Mongo и деплой приложения на сервере.',
    ],
    deployLink: 'http://188.225.82.26:3000/',
    gitHubLink: 'https://github.com/NikitaSamoylov/clothes-shop',
  },
  {
    num: 1,
    title: 'Приложение с API Star Wars',
    descr: [
      'Задействовал технологии: React.js, Javascript, SCSS. Библиотеки: React Router, React transition group для анимаций и React Helmet для заголовков документа. Еще API “Звездных войн”.',

      'В приложении 3 страницы: персонажи, планеты и корабли. На главной странице - лист персонажей с подгрузкой, компонент с подробностями по персонажу и компонент с поиском по имени. ',

      'Пользователь кликает на любого персонажа и в компоненте справа видит характеристики персонажа, фильмы с участием и корабли. Нажимает на фильм и перенаправляется на страницу с описанием фильма. Ссылка при клике на элемент списка кораблей ведет на страницу 404. ',

      'Список персонажей и данные по персонажу сохраняются в Local Storage.Поэтому не требуется запрос к базе данных при возврате к списку персонажей.Благодаря этому интерфейс для пользователя работает быстрее.',
    ],
    deployLink: 'https://star-wars-app-self-one.vercel.app/',
    gitHubLink: 'https://github.com/NikitaSamoylov/star-wars-app/tree/func-components',
  },
  {
    num: 2,
    title: 'CRUD - приложение',
    descr: [
      'на React, для стилизации применил styled components. Компоненты - классовые. Благодаря приложению Autobroker пользователь просматривает автомобили в наличии, автомобили на продаже и автомобили, по которым нужно снизить цену.',

      'Пользователь добавляет новые авто, выставляет на продажу и отмечает авто, по которым нужно снизить цену. После продажи пользователь удаляет автомобиль. Еще пользователь находит интересующий автомобиль через строку поиска.',

      'В “шапке” приложения пользователь видит общее количество автомобилей и количество авто на продаже. Эти счетчики динамически меняются от действий пользователя: удаление, добавление нового автомобиля, снятие или добавления авто на продажу.',

      'По клику на цену автомобиля пользователь меняет значение, если цена изменилась или ввёл ее неверно.',
    ],
    deployLink: 'https://nikitasamoylov.github.io/autobroker-app/',
    gitHubLink: 'https://github.com/NikitaSamoylov/autobroker-app/tree/styled-components',
  },
  {
    num: 3,
    title: 'Приложение Прогноз Погоды',
    descr: [
      'на React, для стилизации применил styled components. Компоненты - классовые. Благодаря приложению Autobroker пользователь просматривает автомобили в наличии, автомобили на продаже и автомобили, по которым нужно снизить цену.',

      'Пользователь добавляет новые авто, выставляет на продажу и отмечает авто, по которым нужно снизить цену. После продажи пользователь удаляет автомобиль. Еще пользователь находит интересующий автомобиль через строку поиска.',

      'В “шапке” приложения пользователь видит общее количество автомобилей и количество авто на продаже.Эти счетчики динамически меняются от действий пользователя: удаление, добавление нового автомобиля, снятие или добавления авто на продажу.',

      'По клику на цену автомобиля пользователь меняет значение, если цена изменилась или ввёл ее неверно.',
    ],
    deployLink: 'https://nikitasamoylov.github.io/weather-app/',
    gitHubLink: 'https://github.com/NikitaSamoylov/weather-app',
  },
  {
    num: 4,
    title: 'SPA - приложение на классах Javascript',
    descr: [
      'Приложение разделено на компоненты, отслеживает изменение состояний библиотека on-change. Проект собран благодаря Webpack. Использовал API Кинопоиска с базой фильмов.',

      'Пользователь в компоненте поиска пишет название фильма и выводятся карточки фильмов: постер, название и кнопки. Пользователь добавляет фильм в избранное или переходит на страницу с подробной информацией: рейтинг, год, продолжительность и описание. Ниже пользователь добавляет фильм в избранное. Счетчик в шапке приложения увеличивается. Если фильм уже добавлен - кнопка оранжевая с содержимым “в избранном”. При следующем клике на кнопку фильм удаляется из избранного. ',

      'Пользователь переходит на страницу избранное и просматривает информацию о добавленных фильмах. По клику на кнопку фильм удаляется из списка. ',

      'Благодаря пагинации пользователь видит полный список фильмов из базы по названию.',
    ],
    deployLink: 'https://nikitasamoylov.github.io/movieApp/dist/index.html#',
    gitHubLink: 'https://github.com/NikitaSamoylov/movieApp',
  }
];

const Projects: React.FC = () => {
  const [blockIsVisible, setBlockIsVisible] = useState(5);

  console.log(blockIsVisible)

  return (
    <div>
      <h1 className={ styles.projects__title }>
        проекты
      </h1>
      <AccordionProjects
        data={ projectsData }
      />
    </div>
  )
};

export { Projects };